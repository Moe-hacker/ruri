name: Build release

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'build/**'
      - 'configure'
      - 'Makefile'
    tags:
      - "v*"
  pull_request:

jobs:
  update:
    name: Fetch Latest Version
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.fetch_version.outputs.release }}
      version: ${{ steps.fetch_version.outputs.version }}
      release_name: ${{ steps.fetch_version.outputs.release_name }}
      build_time: ${{ steps.fetch_version.outputs.build_time }}
    steps:
      - name: fetch latest version
        id: fetch_version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            version="${{ github.ref_name }}"
            release_name="ruri ${{ github.ref_name }} Release"
          else
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            version=$(echo "$response" | jq -r .tag_name)
            release_name=$(echo "$response" | jq -r .name)
          fi

          if [[ -n "$version" && "$version" != "null" && -n "$release_name" && "$release_name" != "null" ]]; then
            echo "release=true" >> $GITHUB_OUTPUT
          else
            echo "release=false" >> $GITHUB_OUTPUT
          fi

          build_time="UTC $(TZ=UTC date '+%Y%m%d%H%M')"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "build_time=$build_time" >> $GITHUB_OUTPUT

  buildloong64:
    runs-on: ubuntu-latest
    steps:
      - name: Install toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y binfmt-support binutils build-essential debootstrap git libc6-dev libcap-dev libfdt-dev libglib2.0-dev libpixman-1-dev libseccomp-dev ninja-build pkg-config python3 python3-pip python3-tomli qemu-system-misc tree upx-ucl xz-utils zlib1g-dev uuid-runtime
          pip3 install meson

      - name: Build x86_64 Ruri
        run: |
          mkdir -p build
          cd build
          git clone --depth 1 https://github.com/moe-hacker/ruri.git
          cd ruri
          ./configure -s
          make
          strip ruri
          tar -cf ../../x86_64-noupx-$(uuidgen).tar ./ruri ./LICENSE
          upx --best ruri
          tar -cf ../../x86_64-$(uuidgen).tar ./ruri ./LICENSE

      - name: Build loong64 qemu
        run: |
          cd build
          git clone --depth=1 https://github.com/qemu/qemu.git
          cd qemu
          ./configure --static --disable-system --target-list=loongarch64-linux-user
          make -j$(nproc)

          sudo cp build/qemu-loongarch64 /usr/bin/qemu-loongarch64-static

      - name: Build loongarch64 system
        run: |
          cd build
          sudo debootstrap --no-check-gpg \
            --foreign --arch=loong64 --variant=buildd --include=debian-ports-archive-keyring \
            --verbose --components=main --resolve-deps --extra-suites=unreleased \
            unstable ./debian http://ftp.ports.debian.org/debian-ports

          sudo cp /usr/bin/qemu-loongarch64-static ./debian/usr/bin/
          sudo ./ruri/ruri -p -a loong64 -q /usr/bin/qemu-loongarch64-static ./debian /debootstrap/debootstrap --second-stage

      - name: Build loong64 Ruri
        run: |
          cd build
          sudo bash -c 'cat <<EOF >> ./debian/build.sh
          rm -f /etc/resolv.conf
          echo nameserver 1.1.1.1 > /etc/resolv.conf
          apt-get update
          apt-get install -y wget make clang git libseccomp-dev libcap-dev libc-dev binutils upx-ucl tar
          git clone --depth 1 https://github.com/moe-hacker/ruri.git
          cd ruri
          ./configure -s
          make
          strip ruri
          tar -cf ../loong64.tar ./ruri ./LICENSE
          EOF'

          sudo chmod +x ./debian/build.sh
          sudo ./ruri/ruri -p -a loong64 -q /usr/bin/qemu-loongarch64-static ./debian /bin/sh /build.sh
          cp ./debian/loong64.tar ../loongarch64-$(uuidgen).tar

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ruri-${{ github.run_id }}
          path: |
            ./*.tar
          retention-days: 7

  buildmatrix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x86_64, x86, aarch64, armhf, armv7, ppc64le, loongarch64, riscv64, s390x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get --no-install-recommends -y install \
            binutils clang curl libc6-dev libcap-dev libseccomp-dev make qemu-user-static wget xz-utils

      - name: build source code
        run: |
          cd build
          git clone --depth 1 https://github.com/moe-hacker/ruri.git
          cd ruri
          cc -Wl,--gc-sections -static src/*.c src/easteregg/*.c -o ruri -lcap -lseccomp -lpthread
          cp ./ruri ../../

      - name: download latest minirootfs
        env:
          ARCHITECTURE: ${{ matrix.arch }}
          URL: https://dl-cdn.alpinelinux.org/alpine/edge/releases
        run: |
          cd build
          mkdir -p $ARCHITECTURE

          wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq
          sudo mv yq /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

          FILE=$(curl -s "$URL/$ARCHITECTURE/latest-releases.yaml" | yq '.[] | select(.flavor == "alpine-minirootfs") | .file')
          wget -q "$URL/$ARCHITECTURE/$FILE"
          tar -xzf "$FILE" -C "$ARCHITECTURE"

      - name: Build for ${{ matrix.arch }}
        env:
         ARCHITECTURE: ${{ matrix.arch }}
        run: |
          cd build
          cp build.sh "$ARCHITECTURE/build.sh"
          # sudo chmod +x ruri/ruri
          sudo chmod +x ../ruri
          sudo chmod +x "$ARCHITECTURE/build.sh"
          case "$ARCHITECTURE" in
            x86_64)
              # sudo ./ruri/ruri ./$ARCHITECTURE /bin/sh /build.sh
              sudo ../ruri ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            x86)
              sudo ../ruri ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../i386.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../i386-noupx.tar .)
              ;;
            aarch64)
              sudo ../ruri -a aarch64 -q /usr/bin/qemu-aarch64-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            riscv64)
              sudo ../ruri -a riscv64 -q /usr/bin/qemu-riscv64-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              ;;
            armhf)
              sudo ../ruri -a armhf -q /usr/bin/qemu-arm-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            armv7)
              sudo ../ruri -a armv7 -q /usr/bin/qemu-arm-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            ppc64le)
              sudo ../ruri -a ppc64le -q /usr/bin/qemu-ppc64le-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            s390x)
              sudo ../ruri -a s390x -q /usr/bin/qemu-s390x-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              ;;
            loongarch64)
              sudo ../ruri -p -a loong64 -q /usr/bin/qemu-loongarch64-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              ;;
          esac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ruri-${{ matrix.arch }}
          path: |
            ./*.tar
          retention-days: 7

  release:
    name: Push Release
    needs: [update, buildloong64, buildmatrix]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: |
      (github.event_name == 'push' && needs.update.outputs.release == 'true') ||
      startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download All Build
        uses: actions/download-artifact@v4
        with:
          path: ./all

      - name: Move all .tar files
        run: |
          find ./all -type f -name "*.tar" -exec mv {} ./ \;

      - name: Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.update.outputs.version }}
          name: ${{ needs.update.outputs.release_name }}
          body: |
            This is ruri binary release.
            NOTE:
            *-noupx means the binary is not upx compressed.
            Non-unique identifiers (UUIDs) are all compiled using the Alpine system.
            ruri use musl as libc to build by default (in alpine container), for smaller binary size and better security.
            But since I didn't found way to get stable musl container image for loongarch64, the binary for loongarch64 is built with glibc in debian.
            Build time: ${{ needs.update.outputs.build_time }}
          files: |
            *.tar
