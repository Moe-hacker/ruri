name: Build release

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'build/**'
      - 'configure'
      - 'Makefile'
  pull_request:

jobs:
  update:
    name: Fetch Latest Version
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.fetch_version.outputs.release }}
      version: ${{ steps.fetch_version.outputs.version }}
      release_name: ${{ steps.fetch_version.outputs.release_name }}
      build_time: ${{ steps.fetch_version.outputs.build_time }}
    steps:
      - name: fetch latest version
        id: fetch_version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            version="${{ github.ref_name }}"
            release_name="ruri ${{ github.ref_name }} Release"
          else
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            version=$(echo "$response" | jq -r .tag_name)
            release_name=$(echo "$response" | jq -r .name)
          fi

          if [[ -n "$version" && "$version" != "null" && -n "$release_name" && "$release_name" != "null" ]]; then
            echo "release=true" >> $GITHUB_OUTPUT
          else
            echo "release=false" >> $GITHUB_OUTPUT
          fi

          build_time="UTC $(TZ=UTC date '+%Y%m%d%H%M')"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "release_name=$release_name" >> $GITHUB_OUTPUT
          echo "build_time=$build_time" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: update
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        arch: [x86_64, x86, aarch64, armhf, armv7, ppc64le, loongarch64, riscv64, s390x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get --no-install-recommends -y install \
          curl \
          wget \
          xz-utils \
          make \
          clang \
          libseccomp-dev \
          libcap-dev \
          libc6-dev \
          binutils \
          qemu-user-static

      - name: build source code
        run: |
          # cd build
          # git clone --depth 1 https://github.com/moe-hacker/ruri.git
          # cd ruri
          cc -Wl,--gc-sections -static src/*.c src/easteregg/*.c -o ruri -lcap -lseccomp -lpthread

      - name: download latest minirootfs
        env:
          ARCHITECTURE: ${{ matrix.arch }}
          URL: https://dl-cdn.alpinelinux.org/alpine/edge/releases
        run: |
          cd build
          mkdir -p $ARCHITECTURE

          wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq
          sudo mv yq /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

          FILE=$(curl -s "$URL/$ARCHITECTURE/latest-releases.yaml" | yq '.[] | select(.flavor == "alpine-minirootfs") | .file')
          wget -q "$URL/$ARCHITECTURE/$FILE"
          tar -xzf "$FILE" -C "$ARCHITECTURE"

      - name: Build for ${{ matrix.arch }}
        env:
         ARCHITECTURE: ${{ matrix.arch }}
        run: |
          cd build
          cp build.sh "$ARCHITECTURE/build.sh"
          # sudo chmod +x ruri/ruri
          sudo chmod +x ../ruri
          sudo chmod +x "$ARCHITECTURE/build.sh"
          case "$ARCHITECTURE" in
            x86_64)
              # sudo ./ruri/ruri ./$ARCHITECTURE /bin/sh /build.sh
              sudo ../ruri ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            x86)
              sudo ../ruri ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../i386.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../i386-noupx.tar .)
              ;;
            aarch64)
              sudo ../ruri -a aarch64 -q /usr/bin/qemu-aarch64-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            riscv64)
              sudo ../ruri -a riscv64 -q /usr/bin/qemu-riscv64-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              ;;
            armhf)
              sudo ../ruri -a armhf -q /usr/bin/qemu-arm-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            armv7)
              sudo ../ruri -a armv7 -q /usr/bin/qemu-arm-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            ppc64le)
              sudo ../ruri -a ppc64le -q /usr/bin/qemu-ppc64le-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              (cd $ARCHITECTURE/output2 && tar -cf ../../../$ARCHITECTURE-noupx.tar .)
              ;;
            s390x)
              sudo ../ruri -a s390x -q /usr/bin/qemu-s390x-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              ;;
            loongarch64)
              sudo ../ruri -p -a loong64 -q /usr/bin/qemu-loongarch64-static ./$ARCHITECTURE /bin/sh /build.sh
              (cd $ARCHITECTURE/output && tar -cf ../../../$ARCHITECTURE.tar .)
              ;;
          esac

      - name: Release
        if: needs.update.outputs.release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.update.outputs.version }}
          name: ${{ needs.update.outputs.release_name }}
          body: |
            This is ruri binary release.
            NOTE:
            *-noupx means the binary is not upx compressed.
            ruri use musl as libc to build by default (in alpine container), for smaller binary size and better security.
            But since I didn't found way to get stable musl container image for loongarch64, the binary for loongarch64 is built with glibc in debian.
            Build time: ${{ needs.update.outputs.build_time }}
          prerelease: false
          files: |
            *.tar